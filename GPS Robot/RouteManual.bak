#include "btio.nxc"

bool hasBluetooth;
string msgIn;
string msgOut;

long latitude;  // Like y coordinate
long longitude; // Like x coordinate

bool hasCone;
long conePos;

long latitudes[20];
long longitudes[20];
bool cones[20];
int numWaypoints;

int currentWaypoint = 0;

long distToNextWaypoint = 0;
int angleToNextWaypoint = 0;

task btComm() {
  while(true) {
    while( !BTCommCheck(0) ) {
      hasBluetooth = false;
      ClearScreen();
      TextOut( 0, LCD_LINE1, "No BT connection" );
      Wait(1000);
    }

    hasBluetooth = true;

    string msg = BTReceiveMessage(0, 0, true);
    if (msg=="") continue;
    msgIn = msg;

    // Parse the message that was received
    int startIndex = 0;
    long buffer[3];
    int bufferIndex = 0;
    for (int i = 0; i < strlen(msg); i++) {
      if (msg[i] == ':') {
         string num = SubStr(msg, startIndex, i-startIndex);
         startIndex = i+1;
         buffer[bufferIndex++] = StrToNum(num);
      }
    }

    string num = SubStr(msg, startIndex, strlen(msg) - startIndex);
    buffer[bufferIndex++] = StrToNum(num);

    latitude = buffer[0];
    longitude = buffer[1];

    if (bufferIndex > 2) {
      hasCone = true;
      conePos = buffer[2];
    } else {
      hasCone = false;
    }

    BTSendMessage(0, 0, msgOut);
    // Optional delay to slow down the rate of message transfer and maybe (?) save battery
    //Wait(100);
  }
}

void readWaypoints() {
  unsigned int result, fsize;
  byte handle;
  
  long rdataLong;
  byte rdataByte;
  
  result = OpenFileRead("route.dat", fsize, handle);
  numWaypoints = fsize/9;
  if (result == LDR_SUCCESS) {
    for(int i = 0; i < numWaypoints; i++) {
      result = Read(handle, rdataLong);
      latitudes[i] = rdataLong;
      result = Read(handle, rdataLong);
      longitudes[i] = rdataLong;
      result = Read(handle, rdataByte);
      cones[i] = rdataByte == 1 ? true : false;
    }
  }
  CloseFile(handle);
}

void navigateToWaypoint() {
  until(hasBluetooth);
  
  int compassSensor;

  while(true) {
    ClearScreen();
    
    // Update waypoint-relative vars
    distToNextWaypoint = ((longitudes[currentWaypoint] - longitude) * (longitudes[currentWaypoint] - longitude)) + ((latitudes[currentWaypoint] - latitude) * (latitudes[currentWaypoint] - latitude));

    int angleToWaypoint = atan2d(latitudes[currentWaypoint] - latitude, longitudes[currentWaypoint] - longitude);
    compassSensor = SensorHTCompass(S4);
    compassSensor = -compassSensor + 90;
    if (compassSensor < -180) compassSensor += 360;
    int relAngle = angleToWaypoint - compassSensor;
    while(relAngle < -180) relAngle += 360;
    while(relAngle >= 180) relAngle -= 360;

    angleToNextWaypoint = relAngle;
    
    NumOut(0, LCD_LINE1, distToNextWaypoint);
    NumOut(0, LCD_LINE2, SensorHTCompass(S1));
    NumOut(0, LCD_LINE3, compassSensor);
    NumOut(0, LCD_LINE4, angleToWaypoint);
    NumOut(0, LCD_LINE5, angleToNextWaypoint);
    
    CircleOut(80, 20, 5);
    float cosVal = cosd(angleToNextWaypoint);
    float sinVal = sind(angleToNextWaypoint);
    
    LineOut(80 - (5*sinVal), 20 + (5*cosVal), 80 - (20*sinVal), 20 + (20*cosVal));
    
    Wait(100);
    
    if (ButtonPressed(BTNCENTER, FALSE)) {
      until(!ButtonPressed(BTNCENTER, FALSE));
      break;
    }
  }
}

bool searchForCone() {
  if (!hasCone) return true;

  while (true) {
    ClearScreen();
    
    if (hasCone) {
      NumOut(0, LCD_LINE1, conePos);
      CircleOut(50 + conePos/2, LCD_LINE2, 2);
    } else {
      TextOut(0, LCD_LINE1, "No Cone");
    }
    
    Wait(100);
    
    if (ButtonPressed(BTNCENTER, FALSE)) {
      until(!ButtonPressed(BTNCENTER, FALSE));
      if (hasCone && conePos > -10 && conePos < 10) {
        return true;
      }
      return false;
    }
  }
}

task followWaypoints() {
  while (currentWaypoint < numWaypoints) {
    navigateToWaypoint();
    bool result = searchForCone();
    if (result) {
      currentWaypoint++;
    }
  }
}

task main() {
  SetSensorLowspeed(S4);
  readWaypoints();
  start btComm;
  start followWaypoints;
}
