#include "btio.nxc"

bool hasBluetooth;
string msgIn;
string msgOut;

// Latitude and longitude stored as ints to avoid floating point math
// What really matters is relative position
long latitude;
long longitude;

bool hasCone;
long conePos;

bool selectCone = false;

long latitudes[20];
long longitudes[20];
bool cones[20];
int waypointIndex = 0;

task btComm() {
  while(true) {
    while( !BTCommCheck(0) ) {
      hasBluetooth = false;
      ClearScreen();
      TextOut( 0, LCD_LINE1, "No BT connection" );
      Wait(1000);
    }

    hasBluetooth = true;
    
    string msg = BTReceiveMessage(0, 0, true);
    if (msg=="") continue;
    msgIn = msg;
    
    // Parse the message that was received
    int startIndex = 0;
    long buffer[3];
    int bufferIndex = 0;
    for (int i = 0; i < strlen(msg); i++) {
      if (msg[i] == ':') {
         string num = SubStr(msg, startIndex, i-startIndex);
         startIndex = i+1;
         buffer[bufferIndex++] = StrToNum(num);
      }
    }
    
    string num = SubStr(msg, startIndex, strlen(msg) - startIndex);
    buffer[bufferIndex++] = StrToNum(num);
    
    latitude = buffer[0];
    longitude = buffer[1];
    
    if (bufferIndex > 2) {
      hasCone = true;
      conePos = buffer[2];
    } else {
      hasCone = false;
    }
    
    BTSendMessage(0, 0, msgOut);
    // Optional delay to slow down the rate of message transfer and maybe (?) save battery
    //Wait(100);
  }
}

task logger() {
  while(true) {
    until(hasBluetooth);
    
    ClearScreen();
    
    NumOut(0, LCD_LINE1, latitude);
    NumOut(0, LCD_LINE2, longitude);
    
    if (hasCone) {
      TextOut(0, LCD_LINE3, "Cone!");
      NumOut(80, LCD_LINE3, conePos);
    }
    
    if (selectCone) {
      TextOut(0, LCD_LINE4, "Cone Selected");
    } else {
      TextOut(0, LCD_LINE4, "No Cone Selected");
    }
    TextOut(0, LCD_LINE5, "Orange to toggle");
    TextOut(0, LCD_LINE6, "Waypoints:");
    NumOut(80, LCD_LINE6, waypointIndex);
    if (waypointIndex == 19) {
      TextOut(0, LCD_LINE7, "Next is last");
    } else if (waypointIndex == 20) {
      TextOut(0, LCD_LINE7, "No more points");
    }
    if (waypointIndex < 20) {
      TextOut(0, LCD_LINE8, "Log         Save");
    } else {
      TextOut(0, LCD_LINE8, "            Save");
    }
    
    Wait(100);
    
    if (ButtonPressed(BTNCENTER, FALSE)) {
      until(!ButtonPressed(BTNCENTER, FALSE));
      selectCone = !selectCone;
    }
    
    if (ButtonPressed(BTNLEFT, FALSE) && waypointIndex < 20) {
      until(!ButtonPressed(BTNLEFT, FALSE));
      PlayTone(440, 100);
      
      latitudes[waypointIndex] = latitude;
      longitudes[waypointIndex] = longitude;
      cones[waypointIndex] = selectCone;
      waypointIndex++;
    }
    
    if (ButtonPressed(BTNRIGHT, FALSE)) {
      until(!ButtonPressed(BTNRIGHT, FALSE));

      bool success = false;
      
      // Save file
      byte handle;
      unsigned int result;
      byte filesize = 9*waypointIndex;
      
      result = CreateFile("route.dat", filesize, handle);
      if (result == LDR_FILEEXISTS) {
        DeleteFile("route.dat");
        result = CreateFile("route.dat", filesize, handle);
      }
      if (result == LDR_SUCCESS) {
        ClearScreen();
        TextOut(0, LCD_LINE1, "Writing File");
        Wait(1000);
        for (int i = 0; i < waypointIndex; i++) {
          long wdataLong;
          wdataLong = latitudes[i];
          result = Write(handle, wdataLong);
          if (result != LDR_SUCCESS) break;
          wdataLong = longitudes[i];
          result = Write(handle, wdataLong);
          if (result != LDR_SUCCESS) break;
          byte wdataByte;
          wdataByte = cones[i];
          result = Write(handle, wdataByte);
          if (result != LDR_SUCCESS) break;
        }
        CloseFile(handle);
      }
      
      if (result == LDR_SUCCESS) {
        success = true;
      }
      
      ClearScreen();
      
      if (!success) {
        PlayTone(300, 300);
        TextOut(0, LCD_LINE1, "Write Failed!");
      } else {
        PlayTone(600, 100);
        TextOut(0, LCD_LINE1, "Save Success!");
      }
      
      Wait(2000);
    }
  }
}

task main() {
  msgOut = "Not Yet Initialized";
  msgIn = "Not Yet Initialized";
  hasBluetooth = false;
  
  start btComm;
  start logger;
}
